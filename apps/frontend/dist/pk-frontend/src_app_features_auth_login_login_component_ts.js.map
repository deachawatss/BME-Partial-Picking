{"version":3,"file":"src_app_features_auth_login_login_component_ts.js","mappings":"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","sources":["./src/app/features/auth/login/login.component.ts","./src/app/features/auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit, signal, computed } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../../core/services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n\n  // Angular 20 Signals for reactive state management\n  private _isLoading = signal<boolean>(false);\n  private _loginError = signal<string>('');\n  private _connectionStatus = signal<'unknown' | 'connected' | 'disconnected'>('unknown');\n\n  // Public readonly signals\n  public readonly isLoading = this._isLoading.asReadonly();\n  public readonly loginError = this._loginError.asReadonly();\n  public readonly connectionStatus = this._connectionStatus.asReadonly();\n\n  // Computed signals\n  public readonly hasError = computed(() => this._loginError().length > 0);\n  public readonly isConnected = computed(() => this._connectionStatus() === 'connected');\n  public readonly canSubmit = computed(() =>\n    this.loginForm?.valid &&\n    !this._isLoading() &&\n    this._connectionStatus() === 'connected'\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [\n        Validators.required,\n        Validators.minLength(2),\n        Validators.maxLength(50)\n      ]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(100)\n      ]]\n    });\n  }\n\n  ngOnInit(): void {\n    // Check if already authenticated\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/partial-picking']);\n      return;\n    }\n\n    // Test backend connection on component initialization\n    this.testConnection();\n\n    // Auto-retry connection every 10 seconds if disconnected\n    const connectionRetryInterval = setInterval(() => {\n      if (this._connectionStatus() === 'disconnected') {\n        this.testConnection();\n      }\n    }, 10000);\n\n    // Monitor authentication state changes using effect (Angular 20)\n    // Note: In real implementation, use effect() from @angular/core for signal-based reactivity\n    // For now, check authentication state periodically or use a different approach\n    const authCheckInterval = setInterval(() => {\n      if (this.authService.isAuthenticated()) {\n        this.router.navigate(['/partial-picking']);\n        clearInterval(authCheckInterval);\n        clearInterval(connectionRetryInterval);\n      }\n    }, 1000);\n\n    // Auto-focus username field for better UX\n    setTimeout(() => {\n      const usernameField = document.getElementById('username');\n      if (usernameField) {\n        usernameField.focus();\n      }\n    }, 100);\n  }\n\n  /**\n   * Test connection to backend\n   */\n  testConnection(): void {\n    this._connectionStatus.set('unknown');\n\n    this.authService.testConnection().subscribe({\n      next: (isConnected) => {\n        this._connectionStatus.set(isConnected ? 'connected' : 'disconnected');\n        if (!isConnected) {\n          this._loginError.set('Unable to connect to server. Please check your connection.');\n        } else {\n          this._loginError.set('');\n        }\n      },\n      error: () => {\n        this._connectionStatus.set('disconnected');\n        this._loginError.set('Backend server is not available. Please contact IT support.');\n      }\n    });\n  }\n\n  /**\n   * Handle form submission\n   */\n  onSubmit(): void {\n    if (!this.canSubmit()) {\n      this.markAllFieldsAsTouched();\n      return;\n    }\n\n    this._isLoading.set(true);\n    this._loginError.set('');\n    this.loginForm.disable();\n\n    const { username, password } = this.loginForm.value;\n\n    this.authService.login(username.trim(), password).subscribe({\n      next: (response) => {\n        this._isLoading.set(false);\n        this.loginForm.enable();\n\n        if (response.success) {\n          // Success - navigation will be handled by the auth state subscription\n          console.log('Login successful');\n        } else {\n          this._loginError.set(response.message || 'Login failed');\n        }\n      },\n      error: (error) => {\n        this._isLoading.set(false);\n        this.loginForm.enable();\n\n        const errorMessage = error.message || 'Login failed. Please try again.';\n        this._loginError.set(errorMessage);\n\n        // Re-test connection on error\n        setTimeout(() => this.testConnection(), 1000);\n      }\n    });\n  }\n\n  /**\n   * Mark all form fields as touched to show validation errors\n   */\n  private markAllFieldsAsTouched(): void {\n    Object.keys(this.loginForm.controls).forEach(key => {\n      const control = this.loginForm.get(key);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n\n  /**\n   * Get connection status text for display\n   */\n  getConnectionStatusText(): string {\n    switch (this._connectionStatus()) {\n      case 'connected':\n        return 'Backend Connected';\n      case 'disconnected':\n        return 'Backend Disconnected';\n      default:\n        return 'Checking Connection...';\n    }\n  }\n\n  /**\n   * Get connection status icon class\n   */\n  getConnectionStatusIconClass(): string {\n    switch (this._connectionStatus()) {\n      case 'connected':\n        return 'nwfth-indicator-connected';\n      case 'disconnected':\n        return 'nwfth-indicator-disconnected';\n      default:\n        return 'nwfth-indicator-connecting';\n    }\n  }\n\n  /**\n   * Get connection status container class\n   */\n  getConnectionStatusClass(): string {\n    switch (this._connectionStatus()) {\n      case 'connected':\n        return 'nwfth-status-connected';\n      case 'disconnected':\n        return 'nwfth-status-disconnected';\n      default:\n        return 'nwfth-status-connecting';\n    }\n  }\n\n  /**\n   * Get ARIA label for connection status\n   */\n  getConnectionStatusAriaLabel(): string {\n    switch (this._connectionStatus()) {\n      case 'connected':\n        return 'System connected successfully';\n      case 'disconnected':\n        return 'System connection failed';\n      default:\n        return 'Checking system connection';\n    }\n  }\n\n  /**\n   * Check if a form field has a specific error\n   */\n  hasFieldError(fieldName: string, errorType: string): boolean {\n    const field = this.loginForm.get(fieldName);\n    return !!(field && field.hasError(errorType) && field.touched);\n  }\n\n  /**\n   * Get error message for a specific field\n   */\n  getFieldErrorMessage(fieldName: string): string {\n    const field = this.loginForm.get(fieldName);\n    if (!field || !field.touched || !field.errors) {\n      return '';\n    }\n\n    if (field.errors['required']) {\n      return `${this.getFieldDisplayName(fieldName)} is required`;\n    }\n\n    if (field.errors['minlength']) {\n      const requiredLength = field.errors['minlength'].requiredLength;\n      return `${this.getFieldDisplayName(fieldName)} must be at least ${requiredLength} characters`;\n    }\n\n    if (field.errors['maxlength']) {\n      const requiredLength = field.errors['maxlength'].requiredLength;\n      return `${this.getFieldDisplayName(fieldName)} must not exceed ${requiredLength} characters`;\n    }\n\n    return 'Invalid input';\n  }\n\n  /**\n   * Get display name for form field\n   */\n  private getFieldDisplayName(fieldName: string): string {\n    const displayNames: { [key: string]: string } = {\n      username: 'Username',\n      password: 'Password'\n    };\n    return displayNames[fieldName] || fieldName;\n  }\n\n\n  /**\n   * Clear login error\n   */\n  clearError(): void {\n    this._loginError.set('');\n  }\n\n  /**\n   * Handle Enter key press on form fields\n   */\n  onFieldKeyPress(event: KeyboardEvent): void {\n    if (event.key === 'Enter' && this.canSubmit()) {\n      this.onSubmit();\n    }\n  }\n}","<main class=\"min-h-screen relative flex items-center justify-center p-4 overflow-hidden\" role=\"main\">\n  <!-- Base gradient background -->\n  <div class=\"absolute inset-0 bg-gradient-to-br from-nwfth-brown via-nwfth-brown/80 to-nwfth-brown/90\"></div>\n\n  <!-- Animated gradient morphing overlay -->\n  <div class=\"absolute inset-0 animate-gradient-morph\"></div>\n\n  <!-- Multi-layer floating particles system -->\n  <div class=\"absolute inset-0 animate-particles-layer-1\"></div>\n  <div class=\"absolute inset-0 animate-particles-layer-2\"></div>\n  <div class=\"absolute inset-0 animate-particles-layer-3\"></div>\n\n  <!-- Animated glowing orbs -->\n  <div class=\"absolute inset-0 animate-floating-orbs\"></div>\n\n  <!-- Mobile Warning (hidden on desktop) -->\n  <div class=\"mobile-warning fixed top-4 left-4 right-4 z-30\">\n    <p class=\"font-medium\">⚠️ This system is optimized for warehouse tablets and desktop computers. Some features may not work properly on mobile devices.</p>\n  </div>\n\n  <!-- Login form content - positioned above all background effects -->\n  <div class=\"nwfth-card login-form-container w-full max-w-md p-8 space-y-6 relative z-20\" role=\"region\" aria-labelledby=\"login-heading\">\n\n    <!-- Header with Logo and Title -->\n    <div class=\"text-center space-y-4\">\n      <div class=\"flex justify-center\">\n        <img\n          src=\"assets/images/NWFLogo.jpg\"\n          alt=\"Newly Weds Foods Thailand Logo\"\n          class=\"h-28 w-auto mx-auto rounded shadow-sm\"\n          loading=\"eager\" />\n      </div>\n      <div>\n        <h1 id=\"login-heading\" class=\"text-xl font-bold text-foreground whitespace-nowrap\">\n          Partial Picking System\n        </h1>\n      </div>\n    </div>\n\n\n\n    <!-- Login Form -->\n    <form\n      [formGroup]=\"loginForm\"\n      (ngSubmit)=\"onSubmit()\"\n      class=\"space-y-6\"\n      role=\"form\"\n      aria-labelledby=\"login-heading\"\n      novalidate>\n\n      <!-- Username Field -->\n      <div class=\"space-y-2\">\n        <label for=\"username\" class=\"block text-sm font-bold text-foreground\">\n          Username\n          <span class=\"text-red-500\" aria-label=\"required\">*</span>\n        </label>\n        <input\n          id=\"username\"\n          formControlName=\"username\"\n          type=\"text\"\n          placeholder=\"Enter your username\"\n          autocomplete=\"username\"\n          spellcheck=\"false\"\n          aria-describedby=\"username-help username-error\"\n          [attr.aria-invalid]=\"hasFieldError('username', 'required')\"\n          (keypress)=\"onFieldKeyPress($event)\"\n          class=\"nwfth-input w-full min-h-touch px-4 py-3 text-base\" />\n\n        <!-- Screen reader help text -->\n        <div id=\"username-help\" class=\"sr-only\">\n          Enter your warehouse system username\n        </div>\n\n        <!-- Error message -->\n        <div\n          id=\"username-error\"\n          role=\"alert\"\n          aria-live=\"polite\"\n          *ngIf=\"loginForm.get('username')?.touched && loginForm.get('username')?.errors\"\n          class=\"text-sm text-red-600 mt-1\">\n          {{ getFieldErrorMessage('username') }}\n        </div>\n      </div>\n\n      <!-- Password Field -->\n      <div class=\"space-y-2\">\n        <label for=\"password\" class=\"block text-sm font-bold text-foreground\">\n          Password\n          <span class=\"text-red-500\" aria-label=\"required\">*</span>\n        </label>\n        <input\n          id=\"password\"\n          type=\"password\"\n          formControlName=\"password\"\n          placeholder=\"Enter your password\"\n          autocomplete=\"current-password\"\n          aria-describedby=\"password-help password-error\"\n          [attr.aria-invalid]=\"hasFieldError('password', 'required')\"\n          (keypress)=\"onFieldKeyPress($event)\"\n          class=\"nwfth-input w-full min-h-touch px-4 py-3 text-base\" />\n\n        <!-- Screen reader help text -->\n        <div id=\"password-help\" class=\"sr-only\">\n          Enter your warehouse system password\n        </div>\n\n        <!-- Error message -->\n        <div\n          id=\"password-error\"\n          role=\"alert\"\n          aria-live=\"polite\"\n          *ngIf=\"loginForm.get('password')?.touched && loginForm.get('password')?.errors\"\n          class=\"text-sm text-red-600 mt-1\">\n          {{ getFieldErrorMessage('password') }}\n        </div>\n      </div>\n\n      <!-- Submit Button -->\n      <button\n        type=\"submit\"\n        class=\"nwfth-button-primary w-full min-h-touch px-6 py-3 flex items-center justify-center gap-2 disabled:opacity-60 disabled:cursor-not-allowed\"\n        [disabled]=\"!canSubmit()\"\n        [attr.aria-describedby]=\"isLoading() ? 'loading-status' : null\">\n\n        <!-- Loading spinner -->\n        <div\n          *ngIf=\"isLoading()\"\n          class=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\"\n          aria-hidden=\"true\">\n        </div>\n\n        <span>{{ isLoading() ? 'Signing In...' : 'Sign In' }}</span>\n\n        <!-- Loading status for screen readers -->\n        <div\n          id=\"loading-status\"\n          class=\"sr-only\"\n          aria-live=\"polite\"\n          *ngIf=\"isLoading()\">\n          Authentication in progress\n        </div>\n      </button>\n\n      <!-- Connection Status Alert (moved under Sign In button) -->\n      <div class=\"flex justify-center\" *ngIf=\"connectionStatus() === 'disconnected'\">\n        <div\n          class=\"relative flex items-center gap-3 px-4 py-2 rounded-lg border-2 font-medium text-sm transition-all duration-300\"\n          [ngClass]=\"getConnectionStatusClass()\"\n          role=\"status\"\n          [attr.aria-label]=\"getConnectionStatusAriaLabel()\">\n\n          <!-- Animated Status Indicator -->\n          <div class=\"relative flex items-center\">\n            <div\n              class=\"w-3 h-3 rounded-full transition-all duration-300\"\n              [ngClass]=\"getConnectionStatusIconClass()\">\n            </div>\n          </div>\n\n          <!-- Status Text -->\n          <span class=\"font-semibold\">{{ getConnectionStatusText() }}</span>\n        </div>\n      </div>\n\n    </form>\n\n    <!-- Footer -->\n    <div class=\"text-center text-xs text-muted-foreground mt-6 border-t pt-4\">\n      <p>Partial Picking v1.0</p>\n      <p class=\"mt-1\">&copy; 2025 Newly Weds Foods Thailand</p>\n    </div>\n  </div>\n</main>\n\n<!-- Skip link for keyboard navigation -->\n<a\n  href=\"#login-heading\"\n  class=\"sr-only absolute left-0 top-0 z-50 bg-background text-foreground p-4 rounded focus:not-sr-only focus:z-auto\">\n  Skip to main content\n</a>\n\n<!-- Keyboard Shortcuts Help (Screen Reader Only) -->\n<div class=\"sr-only\" aria-live=\"polite\">\n  <p>Use Tab to navigate between form fields. Press Enter to submit the login form when all fields are filled.</p>\n</div>"],"names":["signal","computed","Validators","ReactiveFormsModule","CommonModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","getFieldErrorMessage","ɵɵelement","ɵɵproperty","getConnectionStatusClass","getConnectionStatusIconClass","ɵɵtextInterpolate","getConnectionStatusText","LoginComponent","constructor","fb","authService","router","_isLoading","ngDevMode","debugName","_loginError","_connectionStatus","isLoading","asReadonly","loginError","connectionStatus","hasError","length","isConnected","canSubmit","loginForm","valid","group","username","required","minLength","maxLength","password","ngOnInit","isAuthenticated","navigate","testConnection","connectionRetryInterval","setInterval","authCheckInterval","clearInterval","setTimeout","usernameField","document","getElementById","focus","set","subscribe","next","error","onSubmit","markAllFieldsAsTouched","disable","value","login","trim","response","enable","success","console","log","message","errorMessage","Object","keys","controls","forEach","key","control","get","markAsTouched","getConnectionStatusAriaLabel","hasFieldError","fieldName","errorType","field","touched","errors","getFieldDisplayName","requiredLength","displayNames","clearError","onFieldKeyPress","event","_","_staticBlock","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_17_listener","LoginComponent_Template_input_keypress_23_listener","$event","ɵɵtemplate","LoginComponent_div_26_Template","LoginComponent_Template_input_keypress_32_listener","LoginComponent_div_35_Template","LoginComponent_div_37_Template","LoginComponent_div_40_Template","LoginComponent_div_41_Template","tmp_2_0","tmp_4_0","i4","NgClass","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}