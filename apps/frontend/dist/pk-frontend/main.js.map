{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.config.ts","./src/app/app.routes.ts","./src/app/core/services/http.interceptor.ts","./src/main.ts","./src/app/core/guards/auth.guard.ts","./src/app/core/services/auth.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  template: `\n    <div class=\"app-container\">\n      <router-outlet></router-outlet>\n    </div>\n  `,\n  styles: [`\n    .app-container {\n      min-height: 100vh;\n      background-color: hsl(var(--color-background));\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'PK (Partial Picking System)';\n}","import { ApplicationConfig, importProvidersFrom } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { provideAnimations } from '@angular/platform-browser/animations';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { routes } from './app.routes';\nimport { AuthHttpInterceptor } from './core/services/http.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    // Router configuration\n    provideRouter(routes),\n\n    // HTTP client with interceptors\n    provideHttpClient(),\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthHttpInterceptor,\n      multi: true\n    },\n\n    // Animations\n    provideAnimations(),\n\n    // Additional providers can be added here\n  ]\n};","import { Routes } from '@angular/router';\nimport { AuthGuard, GuestGuard } from './core/guards/auth.guard';\n\nexport const routes: Routes = [\n  // Default redirect to login\n  {\n    path: '',\n    redirectTo: '/login',\n    pathMatch: 'full'\n  },\n\n  // Login route (guest only)\n  {\n    path: 'login',\n    loadComponent: () =>\n      import('./features/auth/login/login.component').then(m => m.LoginComponent),\n    canActivate: [GuestGuard],\n    title: 'Login - PK System'\n  },\n\n  // Dashboard route (protected)\n  {\n    path: 'dashboard',\n    loadComponent: () =>\n      import('./features/dashboard/dashboard.component').then(m => m.DashboardComponent),\n    canActivate: [AuthGuard],\n    title: 'Dashboard - PK System'\n  },\n\n  // Main Partial Picking route (protected) - Direct post-login destination\n  {\n    path: 'partial-picking',\n    loadComponent: () =>\n      import('./features/picking/partial-picking/partial-picking.component').then(m => m.PartialPickingComponent),\n    canActivate: [AuthGuard],\n    title: 'Partial Picking - PK System'\n  },\n\n  // Partial picking routes (protected)\n  {\n    path: 'picking',\n    canActivate: [AuthGuard],\n    children: [\n      {\n        path: '',\n        loadComponent: () =>\n          import('./features/picking/picking-list/picking-list.component').then(m => m.PickingListComponent),\n        title: 'Picking Runs - PK System'\n      },\n      {\n        path: ':runId',\n        loadComponent: () =>\n          import('./features/picking/picking-interface/picking-interface.component').then(m => m.PickingInterfaceComponent),\n        title: 'Partial Picking - PK System'\n      }\n    ]\n  },\n\n  // Weight scale management (protected)\n  {\n    path: 'scales',\n    loadComponent: () =>\n      import('./features/scales/scale-management/scale-management.component').then(m => m.ScaleManagementComponent),\n    canActivate: [AuthGuard],\n    title: 'Scale Management - PK System'\n  },\n\n  // Catch-all route - redirect to login\n  {\n    path: '**',\n    redirectTo: '/login'\n  }\n];","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Get the current token\n    const token = this.authService.getToken();\n\n    // Clone the request and add authorization header if token exists\n    let authReq = request;\n    if (token) {\n      authReq = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n    }\n\n    // Add custom headers for PK system\n    authReq = authReq.clone({\n      headers: authReq.headers\n        .set('Content-Type', 'application/json')\n        .set('X-Workstation-Id', this.getWorkstationId())\n        .set('X-Requested-With', 'PK-Frontend')\n    });\n\n    // Handle the request and potential errors\n    return next.handle(authReq).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle token expiration (401 Unauthorized)\n        if (error.status === 401 && this.authService.isAuthenticatedSync()) {\n          // Try to refresh the token\n          return this.authService.refreshToken().pipe(\n            switchMap(() => {\n              // Retry the original request with new token\n              const newToken = this.authService.getToken();\n              if (newToken) {\n                const retryReq = request.clone({\n                  headers: request.headers.set('Authorization', `Bearer ${newToken}`)\n                });\n                return next.handle(retryReq);\n              }\n              return throwError(() => error);\n            }),\n            catchError(() => {\n              // Refresh failed, logout user\n              this.authService.logout();\n              return throwError(() => error);\n            })\n          );\n        }\n\n        // Handle other error responses\n        this.handleHttpError(error);\n        return throwError(() => error);\n      })\n    );\n  }\n\n  /**\n   * Get workstation ID for request headers\n   */\n  private getWorkstationId(): string {\n    return this.authService.workstationId() || 'unknown';\n  }\n\n  /**\n   * Handle HTTP errors and update connection status\n   */\n  private handleHttpError(error: HttpErrorResponse): void {\n    switch (error.status) {\n      case 0:\n        // Network error or CORS issue\n        console.error('Network error - backend may be unavailable');\n        break;\n      case 403:\n        console.error('Access forbidden - insufficient permissions');\n        break;\n      case 404:\n        console.error('Resource not found');\n        break;\n      case 500:\n        console.error('Internal server error');\n        break;\n      default:\n        console.error(`HTTP error ${error.status}: ${error.message}`);\n    }\n  }\n}","import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { appConfig } from './app/app.config';\n\nbootstrapApplication(AppComponent, appConfig)\n  .catch((err) => console.error(err));","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n\n    // Check if user is authenticated synchronously first\n    if (this.authService.isAuthenticatedSync()) {\n\n      // Check if session is about to expire\n      if (this.authService.isSessionExpiringSoon()) {\n        console.log('Session expiring soon, attempting refresh');\n\n        // Try to refresh token\n        return this.authService.refreshToken().pipe(\n          map(() => true),\n          catchError(() => {\n            // Refresh failed, redirect to login\n            this.redirectToLogin(state.url);\n            return of(false);\n          })\n        );\n      }\n\n      // User is authenticated and session is valid\n      this.authService.updateLastActivity();\n      return true;\n    }\n\n    // User is not authenticated, redirect to login\n    this.redirectToLogin(state.url);\n    return false;\n  }\n\n  /**\n   * Redirect to login page with return URL\n   */\n  private redirectToLogin(returnUrl: string): void {\n    if (returnUrl && returnUrl !== '/') {\n      this.router.navigate(['/login'], { queryParams: { returnUrl } });\n    } else {\n      this.router.navigate(['/login']);\n    }\n  }\n}\n\n/**\n * Guest guard - prevents authenticated users from accessing login page\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuestGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticatedSync()) {\n      // User is already authenticated, redirect to dashboard\n      this.router.navigate(['/dashboard']);\n      return false;\n    }\n\n    return true;\n  }\n}","import { Injectable, signal, computed } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError, BehaviorSubject, timer } from 'rxjs';\nimport { catchError, map, tap, switchMap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n// Authentication Response Interface\ninterface AuthResponse {\n  success: boolean;\n  message: string;\n  token?: string;\n  user?: {\n    id: string;\n    username: string;\n    displayName: string;\n    workstationId?: string;\n    roles?: string[];\n  };\n}\n\n// User Interface\ninterface User {\n  id: string;\n  username: string;\n  displayName: string;\n  workstationId?: string;\n  roles?: string[];\n}\n\n// Connection Status Type\ntype ConnectionStatus = 'unknown' | 'connected' | 'disconnected';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly API_BASE = 'http://localhost:7070/api';\n  private readonly TOKEN_KEY = 'pk_auth_token';\n  private readonly USER_KEY = 'pk_auth_user';\n  private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n\n  // Angular 20 Signals for reactive state management\n  private _isAuthenticated = signal<boolean>(false);\n  private _currentUser = signal<User | null>(null);\n  private _connectionStatus = signal<ConnectionStatus>('unknown');\n  private _sessionTimeout = signal<number | null>(null);\n\n  // Computed signals\n  public readonly isAuthenticated = this._isAuthenticated.asReadonly();\n  public readonly currentUser = this._currentUser.asReadonly();\n  public readonly connectionStatus = this._connectionStatus.asReadonly();\n\n  // Computed properties\n  public readonly isConnected = computed(() => this._connectionStatus() === 'connected');\n  public readonly userDisplayName = computed(() => this._currentUser()?.displayName || '');\n  public readonly workstationId = computed(() => this._currentUser()?.workstationId || '');\n\n  // Session management\n  private sessionTimer?: ReturnType<typeof setTimeout>;\n  private lastActivity = new BehaviorSubject<Date>(new Date());\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.initializeAuth();\n    this.startSessionMonitoring();\n  }\n\n  /**\n   * Initialize authentication state from stored tokens\n   */\n  private initializeAuth(): void {\n    const token = localStorage.getItem(this.TOKEN_KEY);\n    const userJson = localStorage.getItem(this.USER_KEY);\n\n    if (token && userJson) {\n      try {\n        const user = JSON.parse(userJson);\n        this._isAuthenticated.set(true);\n        this._currentUser.set(user);\n        this.setupSessionTimeout();\n      } catch (error) {\n        console.error('Failed to parse stored user data:', error);\n        this.clearAuthData();\n      }\n    }\n  }\n\n  /**\n   * Login with username and password\n   */\n  login(username: string, password: string): Observable<AuthResponse> {\n    const loginData = {\n      username: username.trim(),\n      password: password,\n      workstationId: this.getWorkstationId()\n    };\n\n    return this.http.post<AuthResponse>(`${this.API_BASE}/auth/login`, loginData).pipe(\n      tap(response => {\n        if (response.success && response.token && response.user) {\n          this.setAuthData(response.token, response.user);\n          this._isAuthenticated.set(true);\n          this._currentUser.set(response.user);\n          this.setupSessionTimeout();\n          this.updateLastActivity();\n        }\n      }),\n      catchError(this.handleAuthError.bind(this))\n    );\n  }\n\n  /**\n   * Logout and clear authentication data\n   */\n  logout(): void {\n    this.clearAuthData();\n    this._isAuthenticated.set(false);\n    this._currentUser.set(null);\n    this.clearSessionTimeout();\n    this.router.navigate(['/login']);\n  }\n\n  /**\n   * Check if user is currently authenticated\n   */\n  isAuthenticatedSync(): boolean {\n    return this._isAuthenticated();\n  }\n\n  /**\n   * Get current authentication token\n   */\n  getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  /**\n   * Test connection to backend\n   */\n  testConnection(): Observable<boolean> {\n    return this.http.get(`${this.API_BASE}/health`, { responseType: 'text' }).pipe(\n      map(() => {\n        this._connectionStatus.set('connected');\n        return true;\n      }),\n      catchError(() => {\n        this._connectionStatus.set('disconnected');\n        return of(false);\n      })\n    );\n  }\n\n  /**\n   * Refresh authentication token\n   */\n  refreshToken(): Observable<AuthResponse> {\n    const currentToken = this.getToken();\n\n    if (!currentToken) {\n      return throwError(() => new Error('No token available for refresh'));\n    }\n\n    return this.http.post<AuthResponse>(`${this.API_BASE}/auth/refresh`, {\n      token: currentToken,\n      workstationId: this.getWorkstationId()\n    }).pipe(\n      tap(response => {\n        if (response.success && response.token && response.user) {\n          this.setAuthData(response.token, response.user);\n          this.setupSessionTimeout();\n          this.updateLastActivity();\n        }\n      }),\n      catchError(this.handleAuthError.bind(this))\n    );\n  }\n\n  /**\n   * Update last activity timestamp\n   */\n  updateLastActivity(): void {\n    this.lastActivity.next(new Date());\n    this.setupSessionTimeout();\n  }\n\n  /**\n   * Get workstation ID from environment or generate one\n   */\n  private getWorkstationId(): string {\n    // Try to get from environment or browser\n    return navigator.userAgent.includes('Chrome') ?\n      `WS-${Date.now().toString(36)}` :\n      `WS-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Store authentication data securely\n   */\n  private setAuthData(token: string, user: User): void {\n    localStorage.setItem(this.TOKEN_KEY, token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n  }\n\n  /**\n   * Clear all authentication data\n   */\n  private clearAuthData(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  /**\n   * Setup session timeout monitoring\n   */\n  private setupSessionTimeout(): void {\n    this.clearSessionTimeout();\n\n    this.sessionTimer = setTimeout(() => {\n      console.log('Session timeout - logging out');\n      this.logout();\n    }, this.SESSION_TIMEOUT);\n\n    this._sessionTimeout.set(Date.now() + this.SESSION_TIMEOUT);\n  }\n\n  /**\n   * Clear session timeout\n   */\n  private clearSessionTimeout(): void {\n    if (this.sessionTimer) {\n      clearTimeout(this.sessionTimer);\n      this.sessionTimer = undefined;\n    }\n    this._sessionTimeout.set(null);\n  }\n\n  /**\n   * Start monitoring user activity for session management\n   */\n  private startSessionMonitoring(): void {\n    // Monitor user activity events\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n\n    activityEvents.forEach(event => {\n      document.addEventListener(event, () => {\n        if (this._isAuthenticated()) {\n          this.updateLastActivity();\n        }\n      }, { passive: true });\n    });\n\n    // Check for session timeout every minute\n    timer(0, 60000).subscribe(() => {\n      if (this._isAuthenticated()) {\n        const timeout = this._sessionTimeout();\n        if (timeout && Date.now() > timeout) {\n          console.log('Session expired due to inactivity');\n          this.logout();\n        }\n      }\n    });\n  }\n\n  /**\n   * Handle authentication errors\n   */\n  private handleAuthError(error: HttpErrorResponse): Observable<AuthResponse> {\n    let errorMessage = 'Authentication failed';\n\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Connection error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      switch (error.status) {\n        case 401:\n          errorMessage = 'Invalid username or password';\n          break;\n        case 403:\n          errorMessage = 'Access denied';\n          break;\n        case 404:\n          errorMessage = 'Authentication service not available';\n          break;\n        case 500:\n          errorMessage = 'Server error during authentication';\n          break;\n        default:\n          errorMessage = `Authentication failed (${error.status})`;\n      }\n    }\n\n    this._connectionStatus.set('disconnected');\n\n    return throwError(() => ({\n      success: false,\n      message: errorMessage\n    }));\n  }\n\n  /**\n   * Get remaining session time in minutes\n   */\n  getRemainingSessionTime(): number {\n    const timeout = this._sessionTimeout();\n    if (!timeout) return 0;\n\n    const remaining = timeout - Date.now();\n    return Math.max(0, Math.floor(remaining / (60 * 1000)));\n  }\n\n  /**\n   * Check if session is about to expire (within 5 minutes)\n   */\n  isSessionExpiringSoon(): boolean {\n    return this.getRemainingSessionTime() <= 5;\n  }\n}"],"names":["RouterOutlet","AppComponent","constructor","title","_","_staticBlock","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","styles","provideRouter","provideHttpClient","provideAnimations","HTTP_INTERCEPTORS","routes","AuthHttpInterceptor","appConfig","providers","provide","useClass","multi","AuthGuard","GuestGuard","path","redirectTo","pathMatch","loadComponent","then","m","LoginComponent","canActivate","DashboardComponent","PartialPickingComponent","children","PickingListComponent","PickingInterfaceComponent","ScaleManagementComponent","throwError","catchError","switchMap","authService","intercept","request","next","token","getToken","authReq","clone","headers","set","getWorkstationId","handle","pipe","error","status","isAuthenticatedSync","refreshToken","newToken","retryReq","logout","handleHttpError","workstationId","console","message","ɵɵinject","i1","AuthService","factory","ɵfac","bootstrapApplication","catch","err","of","map","router","route","state","isSessionExpiringSoon","log","redirectToLogin","url","updateLastActivity","returnUrl","navigate","queryParams","i2","Router","providedIn","_staticBlock2","signal","computed","BehaviorSubject","timer","tap","http","API_BASE","TOKEN_KEY","USER_KEY","SESSION_TIMEOUT","_isAuthenticated","ngDevMode","debugName","_currentUser","_connectionStatus","_sessionTimeout","isAuthenticated","asReadonly","currentUser","connectionStatus","isConnected","userDisplayName","displayName","lastActivity","Date","initializeAuth","startSessionMonitoring","localStorage","getItem","userJson","user","JSON","parse","setupSessionTimeout","clearAuthData","login","username","password","loginData","trim","post","response","success","setAuthData","handleAuthError","bind","clearSessionTimeout","testConnection","get","responseType","currentToken","Error","navigator","userAgent","includes","now","toString","Math","random","substr","setItem","stringify","removeItem","sessionTimer","setTimeout","clearTimeout","undefined","activityEvents","forEach","event","document","addEventListener","passive","subscribe","timeout","errorMessage","ErrorEvent","getRemainingSessionTime","remaining","max","floor","HttpClient"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}